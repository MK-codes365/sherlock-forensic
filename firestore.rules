/**
 * @fileoverview Firestore Security Rules for Insight Miner application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, queries, UFDR files, and indicators of interest.
 * Only the authenticated user can access their own data. Administrative privileges are granted based on the existence
 * of a document in the `/roles_admin/{userId}` collection.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/queries/{queryId}: Stores queries submitted by a user.
 * - /users/{userId}/ufdrs/{ufdrId}: Stores UFDR files associated with a user.
 * - /users/{userId}/ufdrs/{ufdrId}/indicators/{indicatorId}: Stores indicators of interest (IOIs) extracted from UFDR files.
 * - /query_results/{queryResultId}: Stores query results, accessible only by admins.
 * - /roles_admin/{userId}: Indicates admin role.
 *
 * Key Security Decisions:
 * - Strict user ownership: Only the authenticated user can read and write data under their own user ID.
 * - No public listing of user-owned data: Listing documents in user-scoped subcollections is restricted to the owner.
 * - Administrative privileges: Controlled by document existence in `/roles_admin/{userId}`.
 * - Authorization independence: Achieved through denormalization of `userId` in the `Query` documents.
 * - Query results are only accessible by admins.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Defines validation for the user's fields on create
     */
    function isValidUserCreate() {
      return request.resource.data.id == request.auth.uid;
    }

    /**
     * @description Defines validation for the user's fields on update
     */
    function isValidUserUpdate() {
      return request.resource.data.id == resource.data.id;
    }


    /**
     * @description Enforces document ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile with matching 'id' field.
     * @allow (get) User with ID 'user123' reads their own profile.
     * @allow (update) User with ID 'user123' updates their profile.
     * @deny (create) User with ID 'user456' attempts to create a profile for 'user123'.
     * @deny (get) User with ID 'user456' attempts to read the profile of 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isValidUserCreate();
      allow update: if isExistingOwner(userId) && isValidUserUpdate();
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for queries submitted by a user.
     * @path /users/{userId}/queries/{queryId}
     * @allow (create) User with ID 'user123' creates a query under their user ID.
     * @allow (get) User with ID 'user123' reads their own query.
     * @allow (update) User with ID 'user123' updates their own query.
     * @deny (create) User with ID 'user456' attempts to create a query under user ID 'user123'.
     * @deny (get) User with ID 'user456' attempts to read a query belonging to user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/queries/{queryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for UFDR files associated with a user.
     * @path /users/{userId}/ufdrs/{ufdrId}
     * @allow (create) User with ID 'user123' creates a UFDR file under their user ID.
     * @allow (get) User with ID 'user123' reads their own UFDR file.
     * @allow (update) User with ID 'user123' updates their own UFDR file.
     * @deny (create) User with ID 'user456' attempts to create a UFDR file under user ID 'user123'.
     * @deny (get) User with ID 'user456' attempts to read a UFDR file belonging to user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/ufdrs/{ufdrId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces document ownership for indicators of interest (IOIs) extracted from UFDR files.
     * @path /users/{userId}/ufdrs/{ufdrId}/indicators/{indicatorId}
     * @allow (create) User with ID 'user123' creates an IOI under their UFDR file.
     * @allow (get) User with ID 'user123' reads their own IOI.
     * @allow (update) User with ID 'user123' updates their own IOI.
     * @deny (create) User with ID 'user456' attempts to create an IOI under user ID 'user123'.
     * @deny (get) User with ID 'user456' attempts to read an IOI belonging to user 'user123'.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/ufdrs/{ufdrId}/indicators/{indicatorId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to query results to administrators only.
     * @path /query_results/{queryResultId}
     * @allow (get) Admin user reads a query result.
     * @deny (get) Non-admin user attempts to read a query result.
     * @principle Restricts access to sensitive data to authorized personnel.
     */
    match /query_results/{queryResultId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

     /**
      * @description Grants admin privileges based on document existence.
      * @path /roles_admin/{userId}
      * @allow (create) User with ID 'admin123' creates their admin role document.
      * @allow (get) Any user can check for the existence of an admin role document.
      * @deny (create) User with ID 'user456' attempts to create an admin role document for 'admin123'.
      * @principle Controls administrative privileges based on document existence.
      */
    match /roles_admin/{userId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if false;
      allow delete: if isOwner(userId) && resource != null;
    }
  }
}